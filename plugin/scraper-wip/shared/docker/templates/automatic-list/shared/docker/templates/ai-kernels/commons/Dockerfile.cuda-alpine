ARG CUDA_FULL_VERSION
ARG CUDA_MAJOR_VERSION
ARG CUDNN_VERSION

FROM lablup/common-glibc-alpine:latest

# CUDA version includes matching driver version
ENV CUDA_MAJOR_VERSION ${CUDA_MAJOR_VERSION:-8.0}
ENV CUDA_FULL_VERSION ${CUDA_VERSION:-8.0.61_375.26}
ENV CUDNN_VERSION $(CUDNN_VERSION:-7.0.1}

# NVIDIA package dependencies
RUN apk add --no-cache perl ncurses5-libs ca-certificates curl libstdc++

# Download and extract CUDA toolkit
RUN cd /tmp; curl -Lo cuda-all.run https://developer.nvidia.com/compute/cuda/${CUDA_MAJOR_VERSION}/Prod2/local_installers/cuda_${CUDA_FULL_VERSION}_linux-run \
    && chmod +x ./cuda-all.run \
    && ./cuda-all.run --extract /tmp \
    && ls -l /tmp
RUN cd /tmp; ./cuda-linux64-rel-*.run -noprompt

# Download and extract cuDNN library
# ref: https://gitlab.com/nvidia/cuda/blob/centos7/8.0/runtime/cudnn7/Dockerfile
RUN CUDNN_DOWNLOAD_SUM=288d844ab289b56d0c7b6719a34c7c0b57a01c58ffbe4d582c9b539da96ed2a7 && \
    curl -fsSL http://developer.download.nvidia.com/compute/redist/cudnn/v7.0.1/cudnn-8.0-linux-x64-v7.tgz -o /tmp/cudnn.tgz && \
    echo "$CUDNN_DOWNLOAD_SUM  /tmp/cudnn.tgz" | sha256sum -c
RUN tar --no-same-owner -xzf /tmp/cudnn.tgz -C /usr/local && \
    mkdir -p /etc/ld.so.conf.d
RUN echo "/usr/local/cuda/lib64" > /etc/ld.so.conf.d/cuda.conf && \
    echo "/usr/local/nvidia/lib64" > /etc/ld.so.conf.d/nvidia.conf
RUN /sbin/ldconfig -v /

# For testing
RUN apk add --no-cache python3 vim

CMD /bin/ash

# vim: ft=dockerfile
